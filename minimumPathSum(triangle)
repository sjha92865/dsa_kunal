def minimumPathSum(triangle, n):
    # Write your code here.
    mx=0
    arr=[]
    for i in triangle:
        arr.append(len(i))
    mx=max(arr)
        
        
    for i in range(0,len(triangle)-1):
        while mx-len(triangle[i])!=0:
            triangle[i].append('X')
    r,c=(n,mx)
    dp={}    
    L=[]
    for j in range(c):
        dp[(n-1,j)]=triangle[n-1][j]
#     print(dp)
    for i in range(n-2,-1,-1):
        for j in range(0,i+1):
#             print(i,j)
            
            p1=dp[(i+1,j)]+triangle[i][j]
            p2=dp[(i+1,j+1)]+triangle[i][j]
            dp[(i,j)]=min(p1,p2)
    return dp[(0,0)]
        




def minimumPathSum(triangle, n):
    # Write your code here.
    mx=0
    arr=[]
    for i in triangle:
        arr.append(len(i))
    mx=max(arr)
        
        
    for i in range(0,len(triangle)-1):
        while mx-len(triangle[i])!=0:
            triangle[i].append('X')
    r,c=(n,mx)
    dp={}    
#     print(dp)
    L=[]
    def call(r,c,L,pr):
        if triangle[r][c]=='X':
            return
        if r==n-1 :
#             print(r,c,"h")
#             print("ans",pr+str(triangle[r][c]))
            return triangle[r][c]








def minimumPathSum(triangle, n):
    # Write your code here.
    mx=0
    arr=[]
    for i in triangle:
        arr.append(len(i))
    mx=max(arr)
        
        
    for i in range(0,len(triangle)-1):
        while mx-len(triangle[i])!=0:
            triangle[i].append('X')
    r,c=(n,mx)
    dp={}    
#     print(dp)
    L=[]
    def call(r,c,L,pr):
        if triangle[r][c]=='X':
            return
        if r==n-1 :
#             print(r,c,"h")
#             print("ans",pr+str(triangle[r][c]))
            return triangle[r][c]
        
#         else:
#             p1=p2=1000001
#         print('ff',r,c)
        if (r,c) in dp:
#             print("jj",r,c,dp[r][c])
            return dp[(r,c)]
        
        if r<n-1 :
#                 if triangle[r+1][c]!='X':
#                     print(r,c)
            p1=call(r+1,c,L,pr+str(triangle[r][c]))+triangle[r][c] 
            L.append(p1)
        if r<n-1 and c<n-1:
#                 if triangle[r+1][c+1]!='X':
            p2=call(r+1,c+1,L,pr+str(triangle[r][c]))+triangle[r][c] 
            L.append(p2)
        
        dp[(r,c)]=min(p1,p2)
        
#         print(r,c,dp[r][c])
        return dp[(r,c)]
        return min( p1 , p2)
#     return dp[0][0]
       
    c=call(0,0,L,'')
#     print(dp)
#     print(L)
    return c
    
        
#         else:
#             p1=p2=1000001
#         print('ff',r,c)
        if (r,c) in dp:
#             print("jj",r,c,dp[r][c])
            return dp[(r,c)]
        
        if r<n-1 :
#                 if triangle[r+1][c]!='X':
#                     print(r,c)
            p1=call(r+1,c,L,pr+str(triangle[r][c]))+triangle[r][c] 
            L.append(p1)
        if r<n-1 and c<n-1:
#                 if triangle[r+1][c+1]!='X':
            p2=call(r+1,c+1,L,pr+str(triangle[r][c]))+triangle[r][c] 
            L.append(p2)
        
        dp[(r,c)]=min(p1,p2)
        
#         print(r,c,dp[r][c])
        return dp[(r,c)]
        return min( p1 , p2)
#     return dp[0][0]
       
    c=call(0,0,L,'')
#     print(dp)
#     print(L)
    return c
    
    
